{
  "name": "Canvasshapes",
  "tagline": "Library of creation, manipulation and calculation of flat geometric shapes.",
  "body": "> -----------------------------------------------------------------------------------------------------\r\n>   'canvasShapes' (namespace) - Library of creation, manipulation and calculation of flat geometric shapes.  \r\n>   Library: 'PolyArea'.  \r\n>   Author: Juan José Guerra Haba - dinertron@gmail.com - Marzo de 2016  \r\n>   License: Free BSD. & Open GPL v.3. Keep credit, please.  \r\n>   Versión: 0.9.0 BETA   \r\n>   File: canvasShapes.js               Main Class: PolyArea.js  \r\n>   \r\n> ----------------------------------------------------------------------------------------------------\r\n# canvasShapes\r\n[![canvasshapes logo](canvasShapes-en/img/canvasShapes-logo.png \"CanvasShapes GitHub page\")](http://guerratron.github.io/canvasShapes \"CanvasShapes page\")\r\n It is a library for drawing geometric figures associated events.  \r\n \r\n It shows geometric calculations (areas, perimeters, ...) and supports a free drawn mode *\"freehand\"*; also it has a graphical interface with buttons bar and an options window where display / modify some of the multiple parameters supported.  \r\n \r\n *'CANVAS-SHAPES'* is actually a namespace that hold the library **'PolyArea'** which is responsible for the bulk of drawn figures, but also houses objects and methods useful in separate modules.  \r\n HTML element works on a *'canvas'* that constructs itself and on which it has implemented a reception event for the creation and modified the figures (points, segments, ...)\r\n\r\n## Usage\r\nAfter loading the file in the *'head'* zone (`<script src = \"... / canvasShapes.js\" ...> </ script>`) you can start to use the library under the namespace: *'canvasShapes'*. It could commence for example, with the viewing of the UI by the method:\r\n\r\n    canvasShapes.render( {id: \"idElement\"} );\r\n \r\nwhere the string *'idElement'* is expected that identifies the container element, that is, the element in which all imbibing *UI*.  \r\nFrom here everything is done visually and interactively in the **GUI**.\r\n\r\n## Features:\r\n- OOP Philosophy, classes, inheritance, modularity, abstraction, ...\r\n- *ECMASCRIPT* 6 features: `\"use-strict\"`.\r\n- Cross-Browser.\r\n- Modularity and abstraction by js-modules and Closures.\r\n- Grouping of modules in a single file to simplify the call in the *'head'*.\r\n- Self-content CSS, *media-queries*, *'bootstrap'* patterns.\r\n- *OUTSTANDING !!* : Assigning events to the figures in the *'canvas'*.  \r\n This is really **INNOVATIVE** and that everyone knows that drawn on a canvas does not allow events, since \r\n they are not objects, but the library does implement recognizing the figures drawn as objects.\r\n\r\n## Developing\r\nDeveloped by [GuerraTron](mailto://dinertron@gmail.com \"author\") @2016\r\n\r\n### Tools\r\nNotepad ++  \r\n\r\nCreated with [Nodeclipse](https://github.com/Nodeclipse/nodeclipse-1) ([Eclipse Marketplace](http://marketplace.eclipse.org/content/nodeclipse), [site](http://www.nodeclipse.org)) Nodeclipse is free open-source project that grows with your contributions.\r\n\r\n### Author: \r\n <cite>I hope it can be useful to someone as it has been for me. In this case it would be appreciated email commenting use or suggestions for future improvements.</cite> &nbsp;  \r\n     ¡ KEEP CREDITS, PLEASE !\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}